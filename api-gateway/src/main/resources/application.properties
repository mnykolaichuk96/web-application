
# Set the name of the Spring Boot application
spring.application.name = api-gateway
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# Configure server settings
server.port = 8080

#GATEWAY CONFIGURATIONS
## Product Service Route
#    Just a free choice name
spring.cloud.gateway.routes[0].id=inventory-service
#   Can use http://localhost:port but we have random port
#   and want to use load balancer lb://product-service (lb for using eureka load balances)
spring.cloud.gateway.routes[0].uri=lb://inventory-service
#   We can set multiple paths to identify a correct routing destination.
#   Redirection from localhost:port/api/product to localhost:8080
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/inventory/**
#spring.cloud.gateway.routes[0].predicates[1]=Path=/api/user/**
spring.cloud.gateway.routes[0].filters[0]=HeadersFilter
#   Here, you can modify requests and responses before or after sending the downstream request
#   We remove prefix here for redirection to localhost:8083 instead of localhost:8083/user
# spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1

spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/order/**
spring.cloud.gateway.routes[1].filters[0]=HeadersFilter

# Configure security settings for OAuth2 Resource Server
#spring.security.oauth2.resourceserver.jwt.issuer-uri = http://localhost:8181/auth/realms/web-application-realm
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri = ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

# Configure JWT authentication properties
jwt.auth.converter.resource-id = web-application-client
jwt.auth.converter.principal-attribute = preferred_username

# Set the logging level for Spring Security to DEBUG
logging.level.org.springframework.security = DEBUG

# Keycloak configuration

# URL Ta linijka zawiera adres URL Keycloak, który jest uzywany do uwierzytelniania i autoryzacji.
app.config.keycloak.url=http://localhost:8181/auth
#Ta linijka okresla realm, ktory jest zestawem zasobow, uzytkownikow i konfiguracji zwiazanych z bezpieczenstwem.
app.config.keycloak.realm=web-application-realm

# Konfiguracja OAuth2- Spring Security

# URL, pod ktorym mozna uzyskac token dostepowy OAuth2 od Keycloak.
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8181/auth/realms/web-application-realm/protocol/openid-connect/token

# URL, pod ktorym mozna uzyskac strone autoryzacji Keycloak, gdzie uzytkownik moze zalogowac sie i wyrazic zgode na dostep do aplikacji.
spring.security.oauth2.client.provider.keycloak.authorization-uri=${app.config.keycloak.url}/realms/${app.config.keycloak.realm}/protocol/openid-connect/auth

# ktory atrybut nazwy uzytkownika z Keycloak powinien byc uzywany jako nazwa uzytkownika w aplikacji.
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username

# URL, pod ktorym mozna uzyskac informacje o uzytkowniku (np. profile) z Keycloak.
spring.security.oauth2.client.provider.keycloak.user-info-uri=${app.config.keycloak.url}/realms/${app.config.keycloak.realm}/protocol/openid-connect/userinfo

# URL  URL, pod ktorym mozna pobrac zbiór kluczy JSON Web Key (JWK) z Keycloak, ktore sa uzywane do weryfikacji tokenow.
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=${app.config.keycloak.url}/realms/${app.config.keycloak.realm}/protocol/openid-connect/certs

# Ta linijka okresla metode uwierzytelniania uzywana do pobierania informacji o uzytkowniku z Keycloak, w tym przypadku jest to metoda oparta na naglówku.
spring.security.oauth2.client.provider.keycloak.user-info-authentication-method=header

#

#Ta linijka okresla, ze dostawca uwierzytelniania dla klienta internet-banking-core-client jest Keycloak.
spring.security.oauth2.client.registration.web-application-client.provider=keycloak
# To jest identyfikator klienta, który jest zarejestrowany w Keycloak dla klienta internet-banking-core-client.
# Client ID z wkladki Clients, ktory sam tworze
spring.security.oauth2.client.registration.web-application-client.client-id=web-application-client
#To jest tajny klucz klienta, ktory jest uzywany do uwierzytelniania klienta internet-banking-core-client w Keycloak.
spring.security.oauth2.client.registration.web-application-client.client-secret=HK1sxnnW9GawDZB54w5CzgUk91McCbik
#Ta linijka okresla typ autoryzacji uzywany podczas uzyskiwania dostepu do zasobów po autoryzacji klienta internet-banking-core-client.
spring.security.oauth2.client.registration.web-application-client.authorization-grant-type=authorization_code
#To jest URI przekierowania, na który uzytkownik zostanie przekierowany po udanej autoryzacji w Keycloak.
spring.security.oauth2.client.registration.web-application-client.redirect-uri=http://localhost:8080/login/oauth2/code/keycloak
#Ta linijka okresla zakres dostepu wymagany przez klienta internet-banking-core-client, w tym przypadku dotyczy to informacji o tozsamosci (openid).
spring.security.oauth2.client.registration.web-application-client.scope=openid
