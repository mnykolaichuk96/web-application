---
version: '3'
services:
#  order-service-db:
#    container_name: order-service-db
#    image: mysql:8.0.32
#    ports:
#      - 3307:3306
#    environment:
#      MYSQL_ROOT_PASSWORD: toor
#      MYSQL_DATABASE: order-service
#      MYSQL_USER: kolya5179596
#      MYSQL_PASSWORD: Rjkz0985179596
#    volumes:
#      - ./mysql-order:/var/lib/mysql
#    command:
#      - --datadir=/var/lib/mysql
#    restart: unless-stopped
#
#  inventory-service-db:
#    container_name: inventory-service-db
#    image: mysql:8.0.32
#    ports:
#      - 3308:3306
#    environment:
#      MYSQL_ROOT_PASSWORD: toor
#      MYSQL_DATABASE: order-service
#      MYSQL_USER: kolya5179596
#      MYSQL_PASSWORD: Rjkz0985179596
#    volumes:
#      - ./mysql-inventory:/var/lib/mysql
#    command:
#      - --datadir=/var/lib/mysql
#    restart: unless-stopped
#
#  product-service-db:
#    container_name: product-service-db
#    image: mongodb/mongodb-community-server:6.0-ubi8
#    restart: unless-stopped
#    ports:
#      - 27017:27017
#    volumes:
#      - ./mongo-product:/var/lib/mysql

  keycloak-db:
    container_name: keycloak-db
    image: mysql:8.0.32
    ports:
      - 3309:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    volumes:
      - ./mysql-keycloak:/var/lib/mysql
    command:
      - --datadir=/var/lib/mysql
    restart: unless-stopped
    networks:
      - keycloak-and-mysql-network

  keycloak:
    container_name: keycloak
    image: jboss/keycloak
#    image: quay.io/keycloak/keycloak:21.1.1
#    command: [ "start-dev", "--import-realm"]
#    command:
#      - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"

    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-db
      DB_PORT: 3306
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    ports:
      - 8181:8080
#    Copy from local realms/realm-export.json inside container
    volumes:
#      - ./realms/:/opt/keycloak/data/import/
      - ./realms/:/opt/jboss/keycloak/imports   #this work fine
    depends_on:
      - keycloak-db
    networks:
      - keycloak-and-mysql-network

      #  zookeeper is using for orchestrate kafka cluster
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.3.2
#    container_name: zookeeper
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
##      interval zookeeper will send hard beat messages
#      ZOOKEEPER_TICK_TIME: 2000
#
#  broker:
#    image: confluentinc/cp-kafka:7.3.2
#    container_name: broker
#    ports:
#      # To learn about configuring Kafka for access across networks see
#      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - 9411:9411
#
#  discovery-server:
#    image: mnykolaichuk/discovery-server:05.05.23
#    container_name: discovery-server
##    Every time we docker compose up it will pull it from dockerhub
#    pull_policy: always
#    ports:
#      - 8761:8761
##    This env activate application-docker.properties instead of application.properties
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#
#  api-gateway:
#    image: mnykolaichuk/api-gateway:05.05.23
#    container_name: api-gateway
#    #    Every time we docker compose up it will pull it from dockerhub
#    pull_policy: always
#    ports:
#      - 8181:8080
#    #    This env activate application-docker.properties instead of application.properties
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
#    depends_on:
#      - zipkin
#      - discovery-server
#      - keycloak

#  product-service:
#    container_name: product-service
#    image: mnykolaichuk/product-service:05.05.23
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - product-service-db
#      - discovery-server
#      - api-gateway
#
#  order-service:
#    container_name: order-service
#    image: mnykolaichuk/order-service:05.05.23
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - order-service-db
#      - broker
#      - zipkin
#      - discovery-server
#      - api-gateway
#
#  inventory-service:
#    container_name: inventory-service
#    image: mnykolaichuk/inventory-service:05.05.23
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - inventory-service-db
#      - discovery-server
#      - api-gateway
#
#  notification-service:
#    container_name: notification-service
#    image: mnykolaichuk/notification-service:05.05.23
#    pull_policy: always
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#      - broker
#      - discovery-server
#      - api-gateway

networks:
  keycloak-and-mysql-network:
    driver: bridge

volumes:
#  mysql-order:
#  mysql-inventory:
  mysql-keycloak:

# docker compose up -d
# -d -- demon mode

